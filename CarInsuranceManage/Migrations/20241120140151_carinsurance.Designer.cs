// <auto-generated />
using System;
using CarInsuranceManage.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarInsuranceManage.Migrations
{
    [DbContext(typeof(CarInsuranceDbContext))]
    [Migration("20241120140151_carinsurance")]
    partial class carinsurance
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("CarInsuranceManage.Models.BannerImage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("sort_order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("status")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("BannerImages");

                    b.HasData(
                        new
                        {
                            id = 1,
                            image = "/images/banner1.jpg",
                            link = "https://example.com",
                            sort_order = 1,
                            status = true
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Claim", b =>
                {
                    b.Property<int>("claim_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("accident_date")
                        .HasColumnType("TEXT");

                    b.Property<string>("claim_number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("claimable_amount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("insured_amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("place_of_accident")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("policy_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("claim_id");

                    b.HasIndex("policy_id");

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            claim_id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accident_date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            claim_number = "CLAIM001",
                            claimable_amount = 1400m,
                            insured_amount = 1500m,
                            place_of_accident = "Highway 1",
                            policy_id = 1
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Comment", b =>
                {
                    b.Property<int>("comment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("comment_text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<int>("customer_id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("comment_id");

                    b.HasIndex("customer_id");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            comment_id = 1,
                            comment_text = "Excellent service!",
                            created_at = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            customer_id = 1,
                            rating = 5,
                            status = "Active"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.CompanyExpense", b =>
                {
                    b.Property<int>("expense_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("expense_amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("expense_date")
                        .HasColumnType("TEXT");

                    b.Property<string>("expense_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("expense_id");

                    b.ToTable("CompanyExpenses");

                    b.HasData(
                        new
                        {
                            expense_id = 1,
                            created_at = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            expense_amount = 5000m,
                            expense_date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            expense_type = "Marketing"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Contact", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("customer_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("date_added")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date_modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            id = 1,
                            customer_id = 1,
                            date_added = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            date_modified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "john.doe@example.com",
                            full_name = "John Doe",
                            message = "What is covered under the policy?",
                            phone = "1234567890",
                            status = true,
                            subject = "Policy Query"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Customer", b =>
                {
                    b.Property<int>("customer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<int>("user_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("customer_id");

                    b.HasIndex("user_id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            customer_id = 1,
                            address = "123 Main St",
                            full_name = "John Doe",
                            phone_number = "1234567890",
                            user_id = 1
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.CustomerSupportRequest", b =>
                {
                    b.Property<int>("support_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<int>("customer_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("resolved_at")
                        .HasColumnType("TEXT");

                    b.Property<int>("resolved_by")
                        .HasColumnType("INTEGER");

                    b.Property<string>("support_description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("support_payment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("support_status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("support_type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("support_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("resolved_by");

                    b.ToTable("CustomerSupportRequests");

                    b.HasData(
                        new
                        {
                            support_id = 1,
                            created_at = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            customer_id = 1,
                            resolved_by = 1,
                            support_description = "Question about policy details",
                            support_payment = "Paid",
                            support_status = "Open",
                            support_type = "Policy Inquiry"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Estimate", b =>
                {
                    b.Property<int>("estimate_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<int>("customer_id")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("estimate_amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("policy_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("vehicle_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("warranty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("estimate_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("Estimates");

                    b.HasData(
                        new
                        {
                            estimate_id = 1,
                            created_at = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            customer_id = 1,
                            estimate_amount = 1500m,
                            policy_type = "Comprehensive",
                            vehicle_id = 1,
                            warranty = "1 Year"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.InsuranceHistory", b =>
                {
                    b.Property<int>("history_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("change_date")
                        .HasColumnType("TEXT");

                    b.Property<string>("change_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("changed_by")
                        .HasColumnType("INTEGER");

                    b.Property<string>("new_value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("old_value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("policy_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("history_id");

                    b.HasIndex("changed_by");

                    b.HasIndex("policy_id");

                    b.ToTable("InsuranceHistories");

                    b.HasData(
                        new
                        {
                            history_id = 1,
                            change_date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            change_type = "Policy Created",
                            changed_by = 1,
                            new_value = "Comprehensive Policy - $1500",
                            old_value = "",
                            policy_id = 1
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.InsurancePolicy", b =>
                {
                    b.Property<int>("policy_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("customer_id")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("policy_amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("policy_end_date")
                        .HasColumnType("TEXT");

                    b.Property<string>("policy_number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("policy_start_date")
                        .HasColumnType("TEXT");

                    b.Property<string>("policy_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("vehicle_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("policy_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("InsurancePolicies");

                    b.HasData(
                        new
                        {
                            policy_id = 1,
                            customer_id = 1,
                            policy_amount = 1500m,
                            policy_end_date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            policy_number = "POL123456",
                            policy_start_date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            policy_type = "Comprehensive",
                            vehicle_id = 1
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.LoginLog", b =>
                {
                    b.Property<int>("log_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ip_address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("login_time")
                        .HasColumnType("TEXT");

                    b.Property<int>("user_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("log_id");

                    b.HasIndex("user_id");

                    b.ToTable("LoginLogs");

                    b.HasData(
                        new
                        {
                            log_id = 1,
                            ip_address = "192.168.1.1",
                            login_time = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            user_id = 1
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Notification", b =>
                {
                    b.Property<int>("notification_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("customer_id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("is_read")
                        .HasColumnType("INTEGER");

                    b.Property<string>("message_content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("message_type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("sent_at")
                        .HasColumnType("TEXT");

                    b.HasKey("notification_id");

                    b.HasIndex("customer_id");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            notification_id = 1,
                            customer_id = 1,
                            is_read = false,
                            message_content = "Your payment is due soon",
                            message_type = "Payment Reminder",
                            sent_at = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Payment", b =>
                {
                    b.Property<int>("payment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("bill_number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("customer_id")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("payment_amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("payment_date")
                        .HasColumnType("TEXT");

                    b.Property<int>("policy_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("payment_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("policy_id");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            payment_id = 1,
                            bill_number = "BILL123",
                            customer_id = 1,
                            payment_amount = 1500m,
                            payment_date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            policy_id = 1
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Report", b =>
                {
                    b.Property<int>("report_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("generated_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("report_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("report_id");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            report_id = 1,
                            description = "Annual performance report",
                            generated_at = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            report_type = "Annual Report"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.SpecialInsuranceRequest", b =>
                {
                    b.Property<int>("request_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("customer_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("request_date")
                        .HasColumnType("TEXT");

                    b.Property<string>("request_description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("request_type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("vehicle_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("request_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("SpecialInsuranceRequests");

                    b.HasData(
                        new
                        {
                            request_id = 1,
                            customer_id = 1,
                            request_date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            request_description = "Extend policy coverage by 6 months",
                            request_type = "Extended Coverage",
                            status = "Pending",
                            vehicle_id = 1
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("user_type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("user_id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            user_id = 1,
                            address = "123 Main St",
                            created_at = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "john.doe@example.com",
                            full_name = "John Doe",
                            password = "hashed_password1",
                            phone_number = "1234567890",
                            user_type = "Customer",
                            username = "john_doe"
                        },
                        new
                        {
                            user_id = 2,
                            address = "456 Elm St",
                            created_at = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "jane.admin@example.com",
                            full_name = "Jane Admin",
                            password = "hashed_password2",
                            phone_number = "0987654321",
                            user_type = "Employee",
                            username = "jane_admin"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Vehicle", b =>
                {
                    b.Property<int>("vehicle_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("body_number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("customer_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("engine_number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("vehicle_model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("vehicle_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("vehicle_rate")
                        .HasColumnType("TEXT");

                    b.Property<string>("vehicle_version")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("vehicle_id");

                    b.HasIndex("customer_id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            vehicle_id = 1,
                            body_number = "1234ABCD",
                            customer_id = 1,
                            engine_number = "ENG5678",
                            vehicle_model = "2020",
                            vehicle_name = "Toyota Corolla",
                            vehicle_rate = 20000m,
                            vehicle_version = "LE"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.VehicleImage", b =>
                {
                    b.Property<int>("image_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("image_path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("image_type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("uploaded_at")
                        .HasColumnType("TEXT");

                    b.Property<int>("vehicle_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("image_id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("VehicleImages");

                    b.HasData(
                        new
                        {
                            image_id = 1,
                            description = "Front view of Toyota Corolla",
                            image_path = "/images/vehicle1.jpg",
                            image_type = "Vehicle",
                            uploaded_at = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            vehicle_id = 1
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Claim", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.InsurancePolicy", "InsurancePolicy")
                        .WithMany()
                        .HasForeignKey("policy_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsurancePolicy");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Comment", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Contact", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Customer", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.CustomerSupportRequest", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceManage.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("resolved_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Estimate", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceManage.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("vehicle_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.InsuranceHistory", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("changed_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceManage.Models.InsurancePolicy", "InsurancePolicy")
                        .WithMany()
                        .HasForeignKey("policy_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsurancePolicy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.InsurancePolicy", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceManage.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("vehicle_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.LoginLog", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Notification", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Payment", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceManage.Models.InsurancePolicy", "InsurancePolicy")
                        .WithMany()
                        .HasForeignKey("policy_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("InsurancePolicy");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.SpecialInsuranceRequest", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceManage.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("vehicle_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Vehicle", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.VehicleImage", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("vehicle_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
