CREATE DATABASE IF NOT EXISTS carinsurance;
USE carinsurance;

-- Users Table
CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    full_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone_number VARCHAR(15),
    address VARCHAR(255),
    user_type ENUM('Customer', 'Employee') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Customers Table
CREATE TABLE Customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    full_name VARCHAR(100) NOT NULL,
    phone_number VARCHAR(15),
    address VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- Vehicles Table
CREATE TABLE Vehicles (
    vehicle_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    vehicle_name VARCHAR(100) NOT NULL,
    vehicle_model VARCHAR(100) NOT NULL,
    vehicle_version VARCHAR(100),
    body_number VARCHAR(50),
    engine_number VARCHAR(50),
    vehicle_rate DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- VehicleImages Table
CREATE TABLE VehicleImages (
    image_id INT AUTO_INCREMENT PRIMARY KEY,
    vehicle_id INT,
    image_type ENUM('Vehicle', 'Insurance Document', 'Claim Document') NOT NULL,
    image_path VARCHAR(255) NOT NULL,
    description TEXT,
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (vehicle_id) REFERENCES Vehicles(vehicle_id)
);

-- Estimates Table
CREATE TABLE Estimates (
    estimate_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    vehicle_id INT,
    policy_type VARCHAR(50) NOT NULL,
    warranty VARCHAR(50),
    estimate_amount DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (vehicle_id) REFERENCES Vehicles(vehicle_id)
);

-- InsurancePolicies Table
CREATE TABLE InsurancePolicies (
    policy_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    vehicle_id INT,
    policy_number VARCHAR(50) UNIQUE NOT NULL,
    policy_start_date DATE NOT NULL,
    policy_end_date DATE NOT NULL,
    policy_type VARCHAR(50) NOT NULL,
    policy_amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (vehicle_id) REFERENCES Vehicles(vehicle_id)
);

-- Payments Table
CREATE TABLE Payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    policy_id INT,
    bill_number VARCHAR(50) UNIQUE NOT NULL,
    payment_date DATE NOT NULL,
    payment_amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (policy_id) REFERENCES InsurancePolicies(policy_id)
);

-- Claims Table
CREATE TABLE Claims (
    claim_id INT AUTO_INCREMENT PRIMARY KEY,
    policy_id INT,
    claim_number VARCHAR(50) UNIQUE NOT NULL,
    accident_date DATE NOT NULL,
    place_of_accident VARCHAR(255),
    insured_amount DECIMAL(10, 2) NOT NULL,
    claimable_amount DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (policy_id) REFERENCES InsurancePolicies(policy_id)
);

-- CompanyExpenses Table
CREATE TABLE CompanyExpenses (
    expense_id INT AUTO_INCREMENT PRIMARY KEY,
    expense_type VARCHAR(50) NOT NULL,
    expense_date DATE NOT NULL,
    expense_amount DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Reports Table
CREATE TABLE Reports (
    report_id INT AUTO_INCREMENT PRIMARY KEY,
    report_type VARCHAR(50) NOT NULL,
    generated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    description TEXT
);

-- LoginLogs Table
CREATE TABLE LoginLogs (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    login_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ip_address VARCHAR(50),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- InsuranceHistory Table
CREATE TABLE InsuranceHistory (
    history_id INT AUTO_INCREMENT PRIMARY KEY,
    policy_id INT,
    change_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    change_type VARCHAR(50),
    old_value TEXT,
    new_value TEXT,
    changed_by INT,
    FOREIGN KEY (policy_id) REFERENCES InsurancePolicies(policy_id),
    FOREIGN KEY (changed_by) REFERENCES Users(user_id)
);

-- SpecialInsuranceRequests Table
CREATE TABLE SpecialInsuranceRequests (
    request_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    vehicle_id INT,
    request_type VARCHAR(100),
    request_description TEXT,
    request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('Pending', 'Approved', 'Denied') DEFAULT 'Pending',
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (vehicle_id) REFERENCES Vehicles(vehicle_id)
);

-- CustomerSupportRequests Table
CREATE TABLE CustomerSupportRequests (
    support_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    support_type VARCHAR(100),
    support_description TEXT,
    support_status ENUM('Open', 'Closed', 'Pending') DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    resolved_at TIMESTAMP,
    resolved_by INT,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (resolved_by) REFERENCES Users(user_id)
);

-- Notifications Table
CREATE TABLE Notifications (
    notification_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    message_type VARCHAR(100),
    message_content TEXT,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_read BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Contacts Table
CREATE TABLE Contacts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    full_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    subject VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    date_added DATETIME NOT NULL,
    date_modified DATETIME NOT NULL,
    status BOOLEAN NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- BannerImages Table
CREATE TABLE BannerImages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    image VARCHAR(255) NOT NULL,
    link VARCHAR(255),
    sort_order INT NOT NULL,
    status BOOLEAN NOT NULL
);

-- Comments Table
CREATE TABLE Comments (
    comment_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    comment_text TEXT NOT NULL,
    rating INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('Active', 'Archived') DEFAULT 'Active',
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);
